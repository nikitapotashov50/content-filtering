{"version":3,"sources":["../src/ReactExpandableListView.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;qBAA4C,OAAO;;;;6BAC5B,kBAAkB;;;;mCACZ,wBAAwB;;;;2BACtB,cAAc;;IAExB,aAAa;YAAb,aAAa;;eAAb,aAAa;;WACb;AACjB,UAAI,EAAE,iBAAU,KAAK,CAAC,UAAU;AAChC,mBAAa,EAAE,iBAAU,MAAM,CAAC,UAAU;AAC1C,kBAAY,EAAE,iBAAU,MAAM,CAAC,UAAU;AACzC,YAAM,EAAE,iBAAU,MAAM,CAAC,UAAU;KACpC;;;;AAEU,WARQ,aAAa,CAQpB,KAAK,EAAE;0BARA,aAAa;;AAS9B,+BATiB,aAAa,6CASxB,KAAK,EAAE;QACL,IAAI,GAAK,IAAI,CAAC,KAAK,CAAnB,IAAI;;AACZ,QAAI,CAAC,KAAK,GAAG;AACX,UAAI,EAAJ,IAAI;KACL,CAAA;GACF;;eAdkB,aAAa;;WAgB1B,kBAAG;;;mBACiC,IAAI,CAAC,KAAK;UAA1C,aAAa,UAAb,aAAa;UAAE,YAAY,UAAZ,YAAY;0BAC2B,IAAI,CAAC,KAAK,CAAhE,MAAM;UAAG,QAAQ,iBAAR,QAAQ;UAAE,EAAE,iBAAF,EAAE;UAAE,UAAU,iBAAV,UAAU;UAAE,SAAS,iBAAT,SAAS;UAAE,EAAE,iBAAF,EAAE;UAChD,IAAI,GAAK,IAAI,CAAC,KAAK,CAAnB,IAAI;;AAEZ,UAAI,KAAK,GAAG,CAAC,CAAC;AACd,UAAI,aAAa,GAAG,SAAhB,aAAa,GAAS;AACxB,+BAAqB,KAAK,CAAG;OAC9B,CAAC;;AAEF,UAAI,WAAW,GAAG,SAAd,WAAW,GAAS;AACtB,6BAAmB,KAAK,CAAG;OAC5B,CAAC;;AAEF,aACE;;UAAK,GAAG,EAAC,UAAU,EAAC,KAAK,EAAE,QAAQ,AAAC;QAClC;;YAAI,KAAK,EAAE,EAAE,AAAC;UAEZ,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,KAAK,EAAK;AACpC,gBAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;AACtC,gBAAM,KAAK,GAAI,IAAI,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;gBAC7B,QAAQ,GAAK,IAAI,CAAC,CAAC,CAAC,CAApB,QAAQ;;AAChB,iBAAK,EAAE,CAAC;AACR,gBAAM,SAAS,GAAG,aAAa,EAAE,CAAC;AAClC,gBAAM,OAAO,GAAG,WAAW,EAAE,CAAC;;AAE9B,mBACE;;;AACE,4BAAY,EAAE,EAAC,CAAC,EAAE,CAAC,EAAC,AAAC;AACrB,qBAAK,EAAE,EAAC,CAAC,EAAE,yBAAO,QAAQ,GAAG,GAAG,GAAG,CAAC,CAAC,EAAC,AAAC;cAErC,UAAC,IAAG;oBAAF,CAAC,GAAF,IAAG,CAAF,CAAC;uBACD;;oBAAK,GAAG,EAAE,CAAC,AAAC;kBACV;;sBAAI,EAAE,EAAE,EAAE,AAAC;oBACT;AACE,yBAAG,EAAE,SAAS,AAAC;AACf,4BAAM,EAAE,MAAM,AAAC;AACf,iCAAW,EAAE,KAAK,AAAC;AACnB,4BAAM,EAAE,UAAU,AAAC;AACnB,kCAAY,EAAE,MAAK,YAAY,CAAC,IAAI,QAAO,KAAK,CAAC,AAAC;sBAClD;oBACF;;;AACE,6BAAK,EAAE;AACL,iCAAO,SAAS;AAChB,kCAAQ,UAAU;AAClB,gCAAM,OAAI,CAAC,AAAE;yBACZ,AAAC;sBACJ;AACC,2BAAG,EAAE,OAAO,AAAC;AACb,6BAAK,EAAE,KAAK,AAAC;AACb,8BAAM,EAAE,SAAS,AAAC;wBACjB;qBACE;mBACH;iBACD;eACP;aAEI,CACT;WACD,CAAC;SAEC;OACD,CACN;KACH;;;WAEW,sBAAC,WAAW,EAAE;UAClB,IAAI,GAAK,IAAI,CAAC,KAAK,CAAnB,IAAI;;AACV,UAAI,QAAQ,GAAG,IAAI,CAAC;AACpB,cAAQ,CAAC,WAAW,CAAC,CAAC,QAAQ,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC;AACjE,UAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;;AAE5C,UAAI,CAAC,QAAQ,CACX,OAAO,CACR,CAAA;KACF;;;SA3FkB,aAAa;;;qBAAb,aAAa","file":"ReactExpandableListView.js","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport ListHeader from './lib/ListHeader';\nimport ListItemsManager from './lib/ListItemsManager';\nimport { Motion, spring } from \"react-motion\";\n\nexport default class ReactListView extends Component {\n  static propTypes = {\n    data: PropTypes.array.isRequired,\n    headerAttName: PropTypes.string.isRequired,\n    itemsAttName: PropTypes.string.isRequired,\n    styles: PropTypes.object.isRequired\n  }\n\n  constructor(props) {\n    super(props);\n    const { data } = this.props;\n    this.state = {\n      data\n    }\n  }\n\n  render() {\n    const { headerAttName, itemsAttName } = this.props;\n    const { styles: {outerDiv, ul, listHeader, listItems, li} } = this.props;\n    const { data } = this.state;\n\n    let _refi = 0;\n    let makeHeaderRef = () => {\n      return `ListHeader-${_refi}`;\n    };\n\n    let makeItemRef = () => {\n      return `ListItem-${_refi}`;\n    };\n\n    return (\n      <div ref=\"listview\" style={outerDiv}>\n        <ul style={ul}>\n        {\n          Object.keys(data).map((k, index) => {\n          const header = data[k][headerAttName];\n          const items  = data[k][itemsAttName];\n          const { isOpened } = data[k];\n          _refi++;\n          const headerRef = makeHeaderRef();\n          const itemRef = makeItemRef();\n\n          return (\n            <Motion\n              defaultStyle={{h: 0}}\n              style={{h: spring(isOpened ? 110 : 0)}}>\n              {\n                ({h}) => (\n                  <div key={k}>\n                    <li li={li}>\n                      <ListHeader\n                        ref={headerRef}\n                        header={header}\n                        headerIndex={index}\n                        styles={listHeader}\n                        handleToggle={this.handleToggle.bind(this, index)}\n                      />\n                      <div\n                        style={{\n                          display: `block`,\n                          overflow: `hidden`,\n                          height:`${h}`\n                          }}>\n                        <ListItemsManager\n                         ref={itemRef}\n                         items={items}\n                         styles={listItems}\n                        />\n                      </div>\n                    </li>\n                  </div>\n                )\n              }\n            </Motion>\n          );\n          })\n        }\n        </ul>\n      </div>\n    );\n  }\n\n  handleToggle(headerIndex) {\n    let { data } = this.state;\n    let dataCopy = data;\n    dataCopy[headerIndex].isOpened = !dataCopy[headerIndex].isOpened;\n    const newData = Object.assign({}, dataCopy);\n\n    this.setState(\n      newData\n    )\n  }\n}\n"]}